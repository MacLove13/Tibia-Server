{"version":3,"file":"index.js","sourceRoot":"/","sources":["game/mob/movementation/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Mob } from '@game/mob';\nimport { MoveData, Vector2D } from '@utils/interface';\nimport { ground } from '@game/state';\nimport { serverSocket } from '@socket/socket';\nimport { Rotation } from '@utils/interface';\n\nMob.prototype.Move = function (data: MoveData): void {\n  if (!this.CanMove()) return;\n  ground.FreeCollision(this.syncData.InLayer, this.syncData.Position.x, this.syncData.Position.y);\n  this.syncData.Position.x = data.Pos.x;\n  this.syncData.Position.y = data.Pos.y;\n  ground.SetCollision(this.syncData.InLayer, this.syncData.Position.x, this.syncData.Position.y);\n  serverSocket.emit(\"CharacterMove\", { ID: this.syncData.ID, Data: data });\n  this.lastMoveTime = Date.now();\n};\n\nMob.prototype.MoveDir = function (rot: Rotation): void {\n  var tmpPos = { x: this.syncData.Position.x, y: this.syncData.Position.y };\n  if (rot === Rotation.Left)\n    tmpPos.x--;\n\n  if (rot === Rotation.Top)\n    tmpPos.y--;\n\n  if (rot === Rotation.Right)\n    tmpPos.x++;\n\n  if (rot === Rotation.Down)\n    tmpPos.y++;\n\n  var data = { Rot: rot, Pos: tmpPos };\n  this.Move(data);\n}\n\nMob.prototype.CanMove = function (): boolean {\n  return ((Date.now() - this.lastMoveTime) > this.moveDelay) && !this.IsDead();\n}\n\nMob.prototype.IdleMoving = function (): void {\n  if (!this.CanMove()) return;\n  if (Math.random() > 0.95) {\n    this.MoveByVector({ x: Math.sin(Math.random() * Math.PI * 2), y: Math.sin(Math.random() * Math.PI * 2) });\n  }\n}\n\nMob.prototype.MoveByVector = function (desiredMoveV: Vector2D): void {\n  if (!this.CanMove()) return;\n  var dataArr = new Array<any>(4);\n  var radians = Math.atan2(desiredMoveV.y, desiredMoveV.x);\n        \n  dataArr[Rotation.Left] = ({\n    can: this.TileCanMove(this.syncData.InLayer, this.syncData.Position.x - 1, this.syncData.Position.y),\n    desire: Math.cos(radians)\n  });\n  dataArr[Rotation.Down] = ({\n    can: this.TileCanMove(this.syncData.InLayer, this.syncData.Position.x, this.syncData.Position.y + 1),\n    desire: Math.cos(radians + (Math.PI / 2))\n  });\n  dataArr[Rotation.Right] = ({\n    can: this.TileCanMove(this.syncData.InLayer, this.syncData.Position.x + 1, this.syncData.Position.y),\n    desire: Math.cos(radians + Math.PI)\n  });\n  dataArr[Rotation.Top] = ({\n    can: this.TileCanMove(this.syncData.InLayer, this.syncData.Position.x, this.syncData.Position.y - 1),\n    desire: Math.cos(radians + (Math.PI / 2 * 3))\n  });\n\n  var mostdesire = -1;\n  var result = -1;\n  for (var i = 0; i < 4; i++) {\n    if (dataArr[i].can && dataArr[i].desire > -0.1) {\n      if (dataArr[i].desire > mostdesire) {\n        result = i;\n        mostdesire = dataArr[i].desire;\n      }\n    }\n  }\n\n  if (result !== -1) {\n    this.MoveDir(result);\n  }\n}\n\nMob.prototype.TileCanMove = function (layer: number, x: number, y: number): boolean {\n  return !ground.GetCollision(layer, x, y) && !ground.SafeZone(layer, x, y)\n}\n"]}