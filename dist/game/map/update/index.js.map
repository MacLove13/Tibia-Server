{"version":3,"file":"index.js","sourceRoot":"/","sources":["game/map/update/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as SocketIO from 'socket.io';\nimport { serverSocket } from '@socket/socket';\nimport { mapLayers } from '@game/map';\nimport { MapTile } from '@game/map/map_tile';\nimport { Tile } from '@game/map';\nimport { Player } from '@game/player';\n\nexport function OnConnection(plr: Player, socket: SocketIO.Socket) {\n  const playerLayer = plr.syncData.InLayer;\n\n  socket.emit(\"Game:UpdateMap\", { Layer: 0, Map: mapLayers[0] });\n  socket.emit(\"Game:UpdateMap\", { Layer: 1, Map: mapLayers[1] });\n\n  socket.on(\"tileEditor:updateTile\", (data: any) => {\n    UpdateTile(plr, socket, data.layer, data.x, data.y, data.walkable, data.newType, data.safeZone);\n  });\n}\n\nasync function UpdateTile(plr: Player, socket: SocketIO.Socket, layer: number, x: number, y: number, walkable: boolean, tileType: number, safeZone: boolean) {\n  const tiles = mapLayers[layer].tiles;\n  const tileIndex = tiles.findIndex(tile => tile.x === x && tile.y === y);\n\n  if (tileType === -1) {\n    if (tileIndex > -1) {\n      tiles.splice(tileIndex, 1);\n\n      try {\n        await MapTile.destroy({\n          where: { x: x, y: y, layer: layer }\n        });\n      } catch (error) {\n        console.error('Erro ao deletar tile:', error);\n      }\n    }\n  } else {\n    if (tileIndex > -1) {\n      tiles[tileIndex].walkable = walkable;\n      tiles[tileIndex].tileType = tileType;\n      tiles[tileIndex].safeZone = safeZone;\n    } else {\n      tiles.push({\n        x: x,\n        y: y,\n        walkable: walkable,\n        tileType: tileType,\n        safeZone: safeZone,\n        owner: 0,\n        layer: layer\n      });\n    }\n\n    const [mapTile, created] = await MapTile.findOrCreate({\n      where: { x: x, y: y, layer: layer },\n      defaults: {\n        walkable: walkable,\n        tileType: tileType,\n        safeZone: safeZone,\n        owner: 0,\n        layer: layer\n      }\n    });\n\n    if (!created) {\n      mapTile.set({\n        walkable: walkable,\n        tileType: tileType,\n        safeZone: safeZone,\n        owner: 0,\n        layer: layer\n      });\n      await mapTile.save();\n    }\n  }\n\n  try {\n    serverSocket.emit(\"Game:UpdateMap\", { Layer: layer, Map: mapLayers[layer] });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n"]}