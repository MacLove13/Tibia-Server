{"version":3,"file":"addItem.js","sourceRoot":"/","sources":["game/item/backpack/addItem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAsC;AACtC,0DAA4C;AAC5C,kEAAoD;AAE7C,MAAM,OAAO,GAAG,CAAO,QAAgB,EAAE,YAAoB,EAAE,WAAmB,CAAC,EAAE,EAAE;IAC5F,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,IAAI;QACF,MAAM,IAAI,GAAQ,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAE1E,IAAI,IAAI,EAAE;YACR,MAAM,IAAI,CAAC,MAAM,CAAC;gBAChB,WAAW,EAAE,YAAY;gBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAG,QAAQ;aACnC,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,aAAa,QAAQ,kBAAkB,YAAY,GAAG,CAAC,CAAC;YACpE,MAAM,GAAG,IAAI,CAAC;SACf;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,kBAAkB,QAAQ,aAAa,CAAC,CAAC;SACtD;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;KAC/D;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC;AAtBW,QAAA,OAAO,WAsBlB;AAEK,MAAM,oBAAoB,GAAG,CAAO,YAAY,EAAE,EAAE;IACzD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACxD,MAAM,YAAY,GAAQ,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAEtE,MAAM,eAAe,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;QAC/C,KAAK,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE;KACrC,CAAC,CAAC;IAEH,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,YAAY,CAAC,KAAK,GAAG,CAAC;QAAE,OAAO,IAAI,CAAC;IACxE,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC;AAVW,QAAA,oBAAoB,wBAU/B","sourcesContent":["import * as Model from '@models/item';\nimport * as ItemFind from '@game/item/find';\nimport * as ItemTemplate from '@game/item_template';\n\nexport const AddItem = async (itemUuid: string, backpackUuid: number, quantity: number = 0) => {\n  let result = false;\n\n  try {\n    const item: any = await Model.Item.findOne({ where: { uuid: itemUuid } });\n\n    if (item) {\n      await item.update({\n        inside_item: backpackUuid,\n        quantity: item.quantity + quantity\n      });\n\n      console.log(`Item UUID ${itemUuid}: added to bag ${backpackUuid}.`);\n      result = true;\n    } else {\n      console.log(`Item with UUID ${itemUuid} not found.`);\n    }\n  } catch (error) {\n    console.error('Error in removeItemQuantity function:', error);\n  }\n\n  return false;\n};\n\nexport const BackpackHaveFreeSlot = async (backpackUuid) => {\n  const item = await ItemFind.GetItemByUUID(backpackUuid);\n  const itemTemplate: any = ItemTemplate.GetByID(item.item_template_id);\n\n  const itemsInBackpack = await Model.Item.findAll({\n    where: { inside_item: backpackUuid }\n  });\n\n  if ((itemsInBackpack.length + 1) <= itemTemplate.slots + 1) return true;\n  return false;\n};\n"]}