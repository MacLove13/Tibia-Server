{"version":3,"file":"index.js","sourceRoot":"/","sources":["game/player/stream/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Player } from '@game/player';\nimport { Rotation, MoveData } from '@utils/interface';\nimport * as GameState from '@game/state';\nimport * as Geometry from '@utils/geometry';\nimport { serverSocket } from '@socket/socket';\n\nPlayer.prototype.Dispose = function (): void {\n\t// serverSocket.emit(\"DeleteCharacters\", [this.syncData.ID]);\n  GameState.ground.FreeCollision(this.syncData.InLayer, this.syncData.Position.x, this.syncData.Position.y);\n // this.socket.disconnect();\n\n  this.Revive();\n}\n\nPlayer.prototype.Disconnect = function (): void {\n\tthis.Save();\n\n  serverSocket.emit(\"DeleteCharacters\", [this.syncData.ID]);\n  GameState.ground.FreeCollision(this.syncData.InLayer, this.syncData.Position.x, this.syncData.Position.y);\n  this.socket.disconnect();\n}\n\nPlayer.prototype.SelfAnnouce = function (): void {\n  this.socket.broadcast.emit(\"NewCharacters\", [this.GetJSON()]);\n  GameState.ground.SetCollision(this.syncData.InLayer, this.syncData.Position.x, this.syncData.Position.y);\n}\n\nPlayer.prototype.Sync = function (): void {\n  this.socket.emit(\"PlayerStart\", this.GetJSON());\n}\n\nPlayer.prototype.UpdateEnemyList = function (): void {\n  let count = 0;\n  let battleList: any[] = [];\n  let target = null;\n\n  if (this.targetChar != null) {\n    if (this.targetChar instanceof Player)\n      target = this.targetChar.syncData.ID;\n  }\n\n  GameState.characterList.ForEach((char: any) => {\n    if (char == this) return;\n    var dist = Geometry.GetDistance(this.syncData.Position, char.GetJSON().Position);\n    if (dist > 10) return;\n\n    battleList.push({\n      id: char.syncData.ID,\n      name: char.syncData.Race,\n      level: char.syncData.level,\n      hp: char.syncData.HP,\n      max_hp: char.syncData.MaxHP,\n      distance: dist,\n    })\n  });\n\n  if (battleList.length > 0 || this.targetChar != null) {\n    battleList.sort((a, b) => a.distance - b.distance);\n\n    this.socket.emit(\"BattleMenu\", { ID: this.syncData.ID, Data: {\n        battleList: battleList,\n        TargetID: target,\n      }\n    });\n\n    this.activeEnemiesList = true;\n  }\n  else {\n    if (this.activeEnemiesList) {\n      this.socket.emit(\"BattleMenu\", { ID: this.syncData.ID, Data: {\n          battleList: [],\n          TargetID: null,\n        }\n      });\n    }\n\n    this.activeEnemiesList = false;\n  }\n}\n"]}