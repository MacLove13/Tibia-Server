{"version":3,"file":"index.js","sourceRoot":"/","sources":["game/player/attack/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Player } from '@game/player';\nimport { Character } from '@game/character/interface';\nimport { serverSocket } from '@socket/socket';\nimport * as GameState from '@game/state';\nimport * as Geometry from '@utils/geometry';\n\nPlayer.prototype.Target = function (char: Character): void {\n  if (this.InSafeZone()) {\n    this.socket.emit(\"character:textNotification\", { Message: \"Você não pode atacar dentro de uma safezone.\"});\n    this.targetChar = null;\n    return;\n  }\n\n  if (char.InSafeZone()) {\n    this.socket.emit(\"character:textNotification\", { Message: \"Você não pode atacar um alvo que está em uma safezone.\"});\n    this.targetChar = null;\n    return;\n  }\n\n  this.targetChar = char;\n}\n\nPlayer.prototype.Untarget = function (): void {\n  this.targetChar = null;\n}\n\nPlayer.prototype.AttackTarget = function (): void {\n  if (!this.targetChar) return;\n  if (this.targetChar.GetHP() < 0) {\n    this.targetChar = null;\n    return;\n  }\n\n  if (this.InSafeZone()) {\n    this.socket.emit(\"character:textNotification\", { Message: \"Você não pode atacar dentro de uma safezone.\"});\n    this.targetChar = null;\n    return;\n  }\n\n  let attackDistance = this.syncData.UClass == 'Warrior' ? 1.5 : 6;\n\n  if (!(Date.now() - this.LastAttackTime > this.AttackDelay)) return;\n  var dist = Geometry.GetDistance(this.syncData.Position, this.targetChar.GetJSON().Position);\n  if (dist > attackDistance) return;\n\n  // serverSocket.sockets.emit(\"SpawnProjectile\", { Type: 0, StartPos: this.GetJSON().Position, TargetPos: this.targetChar.GetJSON().Position });\n\n  let randomNum = Math.floor(Math.random() * 3) + 1; // 1 ~ 3\n  let criticalChance = Math.floor(Math.random() * 99) + 1; // 1 ~ 100\n  let criticalRange = Math.floor(Math.random() * 99) + 1; // 1 ~100\n\n  var dmg = this.syncData.Attack + randomNum; // Math.random() * this.syncData.Level * 6 | 0 + this.syncData.Level * 2;\n  \n  if (criticalChance < 2)\n    dmg = 1;\n  else if (criticalChance >= (criticalRange - 5) && criticalChance <= (criticalRange + 4)) {\n    let criticalExtraDamage = Math.floor(Math.random() * 6) + 1; // 1 ~ 6\n    dmg = dmg + criticalExtraDamage;\n  }\n  \n  var deadInfo = this.targetChar.Hit(dmg);\n  if (deadInfo) {\n    this.AddExp(deadInfo.Exp);\n  }\n\n  this.LastAttackTime = Date.now();\n}\n\nPlayer.prototype.Hit = function (this: Player, dmg: number): { Exp: number } | undefined {\n  serverSocket.sockets.emit(\"ApplyDommage\", { AttackType: 0, TargetID: this.syncData.ID, HitPoints: dmg });\n  this.syncData.HP -= dmg;\n  if (this.syncData.HP <= 0) {\n    this.Kill();\n    return { Exp: this.syncData.ExpAtDead * this.syncData.Level };\n  }\n}\n\nPlayer.prototype.Kill = function (): void {\n  this.syncData.HP = -1;\n  \n  const race = this.GetJSON().Race as keyof typeof GameState.config.Mobs;\n\n  serverSocket.sockets.emit(\"Animation\", {\n    Sprites: GameState.config.Mobs[race].DeadSprites,\n    Pos: this.syncData.Position,\n    TicksPerFrame: 2000\n  }); // TicksPerFrame 500\n  \n  this.sendNotification({\n    Title: \"Morte\",\n    Content: \"Você morreu.\"\n  });\n\n  this.Dispose();\n}\n\nPlayer.prototype.CanAttack = function (): boolean {\n  return (Date.now() - this.LastAttackTime) > this.AttackDelay;\n}\n"]}