{"version":3,"file":"index.js","sourceRoot":"/","sources":["sentry/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0EAA0E;AAC1E,qDAAuC;AACvC,2DAA8D;AAC9D,sCAAgC;AAShC,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,IAAI,CAAC;AAC3D,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;AAEjD,IAAI,CAAC,cAAc,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;IACxD,MAAM,CAAC,IAAI,CAAC;QACV,GAAG,EAAE,EAAE;QACP,YAAY,EAAE;YACZ,4BAA4B;YAC5B,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC/C,uCAAuC;YACvC,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,GAAG,EAAH,YAAG,EAAE,CAAC;YACxC,IAAI,qCAAoB,EAAE;SAC3B;QACD,yBAAyB;QACzB,gBAAgB,EAAE,GAAG;QACrB,yEAAyE;QACzE,kBAAkB,EAAE,GAAG;KACxB,CAAC,CAAC;IAEH,YAAG,CAAC,GAAG,CAAC,SAAS,OAAO,CAAC,GAAU,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB;QAClF,0DAA0D;QAC1D,oDAAoD;QACpD,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;QACrB,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,8DAA8D;IAC9D,YAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;IAE1C,4DAA4D;IAC5D,YAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;IAE1C,wCAAwC;IACxC,YAAG,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG;QACxC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,YAAG,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG;QACpD,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,mGAAmG;IACnG,YAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;IAExC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;CACnC;KACI;IACH,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;CACvC","sourcesContent":["// You can also use CommonJS `require('@sentry/node')` instead of `import`\nimport * as Sentry from \"@sentry/node\";\nimport { ProfilingIntegration } from \"@sentry/profiling-node\";\nimport { app } from '../server';\nimport { Request, Response, NextFunction } from \"express\";\n\ndeclare module 'express-serve-static-core' {\n  export interface Response {\n    sentry?: string;\n  }\n}\n\nconst disabledSentry = process.env.DISABLED_SENTRY || true;\nconst sentryDNS = process.env.SENTRY_DNS || null;\n\nif (!disabledSentry && sentryDNS && sentryDNS.length > 5) {\n  Sentry.init({\n    dsn: '',\n    integrations: [\n      // enable HTTP calls tracing\n      new Sentry.Integrations.Http({ tracing: true }),\n      // enable Express.js middleware tracing\n      new Sentry.Integrations.Express({ app }),\n      new ProfilingIntegration(),\n    ],\n    // Performance Monitoring\n    tracesSampleRate: 1.0,\n    // Set sampling rate for profiling - this is relative to tracesSampleRate\n    profilesSampleRate: 1.0,\n  });\n\n  app.use(function onError(err: Error, req: Request, res: Response, next: NextFunction) {\n    // The error id is attached to `res.sentry` to be returned\n    // and optionally displayed to the user for support.\n    res.statusCode = 500;\n    res.end(res.sentry + \"\\n\");\n  });\n\n  // The request handler must be the first middleware on the app\n  app.use(Sentry.Handlers.requestHandler());\n\n  // TracingHandler creates a trace for every incoming request\n  app.use(Sentry.Handlers.tracingHandler());\n\n  // All your controllers should live here\n  app.get(\"/\", function rootHandler(req, res) {\n    res.end(\"Hello world!\");\n  });\n\n  app.get(\"/debug-sentry\", function mainHandler(req, res) {\n    throw new Error(\"My first Sentry error!\");\n  });\n\n  // The error handler must be registered before any other error middleware and after all controllers\n  app.use(Sentry.Handlers.errorHandler());\n\n  console.log('Sentry Initialized');\n}\nelse {\n  console.log('Sentry not configured.');\n}\n"]}